package com.jpa.repository.impl;

import java.util.List;
import java.util.Objects;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.data.domain.SliceImpl;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.query.QueryUtils;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

@Repository
@Transactional(readOnly = true)
public abstract class SlicePagingRepositoryImplementation<T> extends SimpleJpaRepository{

	public static final String NULL_ENTITY = "Entity Cannot be null";
	public static final String NULL_PAGEABLE = "Pageable Cannot be null";
	public static final String NULL_QUERY = "CriteriaQuery Cannot be null";
	
	@Autowired
	private EntityManager entityManager;
	
	private final Class<T> entityClass;
	
	public SlicePagingRepositoryImplementation(final Class<T> entityClass) {
		Objects.requireNonNull(entityClass, NULL_ENTITY);
		this.entityClass = entityClass;
	}
	
	public Slice<T> findAll(Pageable pageable) {
		Objects.requireNonNull(pageable, NULL_PAGEABLE);
		return findAll((Specification<T> null, pageable);
	}
	
	public Slice<T> findAll(Specification<T> spec, Pageable pageable) {
		Objects.requireNonNull(pageable, NULL_PAGEABLE);
		return findAll(spec, pageable, entityClass);
	}
	
	public Slice<T> findAll(Specification<T> spec, Pageable pageable, Class<T> entityClass) {
		
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<T> cq = cb.createQuery(entityClass);
		Root<T> rootEntry = applySpecificationToCriteria(spec, entityClass, cq);
		
	}
	
	private <S, U extends T> Root<U>
}

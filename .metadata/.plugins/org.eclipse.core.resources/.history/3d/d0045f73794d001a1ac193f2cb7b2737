package com.jpa.repository;

import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Map.Entry;

import javax.persistence.EntityManager;
import javax.persistence.LockModeType;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.data.domain.SliceImpl;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.query.QueryUtils;
import org.springframework.data.jpa.repository.support.SimpleJpaRepository;
import org.springframework.lang.Nullable;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

@Repository
@Transactional(readOnly = true)
public class SlicePagingRepositoryImplementation<T>{

	private final String NULL_ENTITY = "Entity Cannot be NULL";
	private final String NULL_PAGEABLE = "Pageable cannot be null";
    private final String NULL_SPECIFICATION = "Specification cannot be null";
    private final String NULL_LOCK_MODE = "Lock mode cannot be null";
    private final String NULL_QUERY_HINTS = "Query hints cannot be null";
    private final String NULL_QUERY = "CriteriaQuery cannot be null";
    
    @Autowired
    private EntityManager entityManager;
	
    private final Class<T> entityClass;

    
    public SlicePagingRepositoryImplementation(final Class<T> entityClass) {
    	 Objects.requireNonNull(entityClass, NULL_ENTITY);
    	this.entityClass = entityClass;
    }
    
    
    
    public Slice<T> findAll(Specification<T> spec, Pageable pageable, 
    			Class<T> entityClass, LockModeType lmt, Map<String, Object> hints) {
    	
    	CriteriaBuilder cb = entityManager.getCriteriaBuilder();
    	CriteriaQuery<T> cq = cb.createQuery(entityClass);
    	Root<T> rootEntry = applySpecificationToCriteria(spec, entityClass, cq);
    	
    	CriteriaQuery<T> all = cq.select(rootEntry);
    	if(pageable.getSort().isSorted()) {
    		all.orderBy(QueryUtils.toOrders(pageable.getSort(), rootEntry, cb));
    	}
    	
    	TypedQuery<T> query = applyRepositoryMethodMetadata(entityManager.createQuery(all), lmt, hints);
    	
    	return this.readSlice(query, pageable);
    	
    }
    
    private <S, U extends T> Root<U> applySpecificationToCriteria(@Nullable Specification<U> spec, Class<U> entityClass,
			CriteriaQuery<S> query) {

		Assert.notNull(entityClass, "Domain class must not be null!");
		Assert.notNull(query, "CriteriaQuery must not be null!");

		Root<U> root = query.from(entityClass);

		if (spec == null) {
			return root;
		}

		CriteriaBuilder builder = entityManager.getCriteriaBuilder();
		Predicate predicate = spec.toPredicate(root, query, builder);

		if (predicate != null) {
			query.where(predicate);
		}

		return root;
	}

    private <S> TypedQuery<S> applyRepositoryMethodMetadata(TypedQuery<S> query, LockModeType lmt, Map<String, Object> hints) {
    	
    	query.setLockMode(lmt);
    	hints.forEach(query::setHint);
    	
		return query;
	}
    
    private Slice<T> readSlice(TypedQuery<T> query, Pageable pageable) {
    	query.setFirstResult((int) pageable.getOffset());
    	query.setMaxResults(pageable.getPageSize() + 1);
    	final List<T> content = query.getResultList();
    	
    	boolean hasNext = content.size() == (pageable.getPageSize() + 1);
    	
    	if(hasNext) {
    		content.remove(content.size() - 1);
    	}
    	
    	return new SliceImpl<>(content, pageable, hasNext);
    }

}

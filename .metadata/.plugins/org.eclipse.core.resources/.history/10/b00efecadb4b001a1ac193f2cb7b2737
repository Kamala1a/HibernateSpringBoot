package com.jpa.repository.impl;

import java.util.Objects;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

@Repository
@Transactional(readOnly = true)
public abstract class SlicePagingRepositoryImplementation<T> {

	private static final String NULL_ENTITY = "Entity Cannot be null";
	private static final String NULL_PAGEABLE = "Entity Cannot be null";
	
	@Autowired
	private EntityManager entityManager;
	
	private final Class<T> entityClass;
	
	public SlicePagingRepositoryImplementation(final Class<T> entityClass) {
		Objects.requireNonNull(entityClass, NULL_ENTITY);
		this.entityClass = entityClass;
	}
	
	public Slice<T> findAll(Pageable pageable) {
		Objects.requireNonNull(pageable, NULL_PAGEABLE);
		return findAll(pageable, entityClass);
	}
	
	private Slice<T> findAll(Pageable pageable, Class<T> entityClass) {
		
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<T> cq = cb.createQuery(entityClass);
		
	}
}

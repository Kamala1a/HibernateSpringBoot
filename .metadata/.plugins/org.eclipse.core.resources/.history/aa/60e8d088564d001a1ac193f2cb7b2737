package com.jpa.repository.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.support.SimpleJpaRepository;
import org.springframework.lang.Nullable;
import org.springframework.stereotype.Repository;

@Repository
public abstract class SlicePagingRepositoryImplementation<T> {

	private static final String NULL_ENTITY = "Entity Cannot be NULL";
	
	@Autowired
	private EntityManager entityManager;
	
	private final Class<T> entityClass;
	
	protected SlicePagingRepositoryImplementation(Class<T> entityClass) {
		Objects.requireNonNull(entityClass, NULL_ENTITY);
		this.entityClass = entityClass;
	}
	
	public Slice<T> findAll(Pageable pageable) {
		final SimpleSliceJpaRepository sliceRepository
        				= new SimpleSliceJpaRepository(entityClass, entityManager);
			return sliceRepository.findAll(pageable);
	}
	
	public static class SimpleSliceJpaRepository<T, ID extends Serializable> 
					extends SimpleJpaRepository<T, ID> {

		public SimpleSliceJpaRepository(Class<T> entityClass, EntityManager entityManager) {
			super(entityClass, entityManager);
		}
		
		
		@Override
		protected <S extends T> Page<S> readPage(TypedQuery<S> query, final Class<S> entityClass, Pageable pageable,
				@Nullable Specification<S> spec) {
			
			query.setFirstResult((int) pageable.getOffset());
			query.setMaxResults(pageable.getPageSize());
			
			final List<S> content = query.getResultList();
			
			return new PageImpl<>(content, pageable, content.size());
			
		}
		
	}
}

package com.jpa.service;

import java.io.InputStream;
import java.io.Serializable;
import java.util.Properties;

import javax.persistence.EntityManager;

import org.hibernate.dialect.Dialect;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.support.JpaEntityInformation;
import org.springframework.data.jpa.repository.support.SimpleJpaRepository;
import org.springframework.transaction.annotation.Transactional;

import com.jpa.repository.BatchRepository;

@Transactional(readOnly = true)
public class BatchRepositoryImpl<T, ID extends Serializable>  
				extends SimpleJpaRepository<T, ID> implements BatchRepository<T, ID>{
	
	@Autowired
	private EntityManager entityManager;

	public BatchRepositoryImpl(JpaEntityInformation entityInformation, EntityManager entityManager) {
		super(entityInformation, entityManager);
		this.entityManager = entityManager;
	}

	@Override
	@Transactional
	public <S extends T> void saveInBatch(Iterable<S> entities) {
		if(entities == null) {
			throw new IllegalArgumentException();
		}
		
		
	}
	
	private static int batchSize() {
		
		int batchsize = Integer.valueOf(Dialect.DEFAULT_BATCH_SIZE);
		
		Properties configuration = new Properties();
		
		try(InputStream inputStream = BatchRepositoryImpl.class.getClassLoader()
				.getResourceAsStream("application.properties"));
		
		return batchsize;
		
	}

}
